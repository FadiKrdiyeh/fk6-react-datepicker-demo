"use strict";(self.webpackChunkreact_datepicker_demo=self.webpackChunkreact_datepicker_demo||[]).push([[472],{21648:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"docs/customization","title":"\ud83e\udde9 Customization","description":"You can customize how individual cells are rendered in the date and time picker using render props like renderDay, renderMonth, renderYear or renderTimeItem and more. Each render function receives useful context including the formatted renderedValue, the associated date, a props object containing default HTML attributes like className, style, and event handlers, and a state object with metadata such as selected, disabled, focused, etc... This allows you to return custom JSX while preserving or extending the default behavior and styling\u2014perfect for adding icons, conditional formatting, tooltips, or fully personalized UI elements, making it easy to tailor the picker to your design needs. There\'s an example for customizing days, months, years, time cells.","source":"@site/docs/docs/customization.md","sourceDirName":"docs","slug":"/docs/customization","permalink":"/fk6-react-datepicker-demo/docs/docs/customization","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"i18n","permalink":"/fk6-react-datepicker-demo/docs/docs/i18n"},"next":{"title":"Theming","permalink":"/fk6-react-datepicker-demo/docs/docs/theming"}}');var o=t(74848),s=t(28453);const i={},a="\ud83e\udde9 Customization",l={},d=[{value:"Customize Date Field",id:"customize-date-field",level:2},{value:"Customize Day Cells",id:"customize-day-cells",level:2},{value:"Customize Month Cells",id:"customize-month-cells",level:2},{value:"Customize Year Cells",id:"customize-year-cells",level:2},{value:"Customize Time Cells",id:"customize-time-cells",level:2},{value:"Customize Week Numbers",id:"customize-week-numbers",level:2},{value:"Customize Go To Today Button",id:"customize-go-to-today-button",level:2},{value:"Customize OK Button",id:"customize-ok-button",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"-customization",children:"\ud83e\udde9 Customization"})}),"\n",(0,o.jsxs)(n.p,{children:["You can customize how individual cells are rendered in the date and time picker using render props like ",(0,o.jsx)(n.code,{children:"renderDay"}),", ",(0,o.jsx)(n.code,{children:"renderMonth"}),", ",(0,o.jsx)(n.code,{children:"renderYear"})," or ",(0,o.jsx)(n.code,{children:"renderTimeItem"})," and more. Each render function receives useful context including the formatted renderedValue, the associated date, a props object containing default HTML attributes like className, style, and event handlers, and a state object with metadata such as selected, disabled, focused, etc... This allows you to return custom JSX while preserving or extending the default behavior and styling\u2014perfect for adding icons, conditional formatting, tooltips, or fully personalized UI elements, making it easy to tailor the picker to your design needs. There's an example for customizing days, months, years, time cells."]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"customize-date-field",children:"Customize Date Field"}),"\n",(0,o.jsx)(n.p,{children:"Customize the look and feel of the input field with full control. The renderDateField prop lets you override the default date input rendering, so you can inject your own components, styles, or behavior. Whether you're integrating with a design system or adding advanced UI logic, this prop makes it easy to match your picker to your app\u2019s unique vibe. Just pass a function that returns your custom field\u2014simple, powerful, and flexible."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"<DatePicker\r\n  renderInput={(dateFieldProps) => (\r\n    <MyCustomInput\r\n      readOnly\r\n      ref={dateFieldProps.ref}\r\n      value={dateFieldProps.value}\r\n      onClick={dateFieldProps.onOpenRequest}\r\n    />\r\n  )}\r\n/>\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"customize-day-cells",children:"Customize Day Cells"}),"\n",(0,o.jsx)(n.p,{children:"Take full control of how each day is rendered in the calendar. With customizable day cells, you can highlight special dates, add icons, tooltips, or even embed interactive elements like buttons or badges. Whether you're marking holidays, events, or availability, this feature lets you tailor the calendar to your app\u2019s unique needs. Just pass a custom render function and make each day count\u2014literally."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'<DatePicker\r\n  calendarProps={{\r\n    daysCalendarProps: {\r\n      renderDay: (renderedValue, date, props, state) => (\r\n        <div {...props}>\r\n          {state.selected ? "#" : "*"}\r\n          {renderedValue}\r\n        </div>\r\n      ),\r\n    },\r\n  }}\r\n/>\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"customize-month-cells",children:"Customize Month Cells"}),"\n",(0,o.jsx)(n.p,{children:"Design your calendar with personality and purpose. With customizable month cells, you can modify how each month is displayed\u2014perfect for highlighting fiscal quarters, seasonal themes, or special periods like school terms or promotional cycles. Inject custom styles, labels, icons, or even interactive elements to make your calendar truly dynamic. Just plug in your render function and shape the calendar to match your app\u2019s rhythm."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'<DatePicker\r\n  calendarProps={{\r\n    monthsCalendarProps: {\r\n      renderMonth: (renderedValue, date, props, state) => (\r\n        <div {...props}>\r\n          {state.selected ? "# " : "* "}\r\n          {renderedValue}\r\n          {state.selected ? " #" : " *"}\r\n        </div>\r\n      ),\r\n    },\r\n  }}\r\n/>\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"customize-year-cells",children:"Customize Year Cells"}),"\n",(0,o.jsx)(n.p,{children:"Make your calendar truly yours by customizing how each year is displayed. Whether you're emphasizing leap years, fiscal cycles, historical milestones, or future plans, the ability to tailor year cells gives you the flexibility to highlight what matters most. Inject custom styles, labels, icons, or interactive elements\u2014just pass a render function and transform the year view into a meaningful, branded experience."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'<DatePicker\r\n  calendarProps={{\r\n    yearsCalendarProps: {\r\n      renderYear: (renderedValue, date, props, state) => (\r\n        <div {...props}>\r\n          {state.selected ? ". " : "- "}\r\n          {renderedValue}\r\n          {state.selected ? " ." : " -"}\r\n        </div>\r\n      ),\r\n    },\r\n  }}\r\n/>\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"customize-time-cells",children:"Customize Time Cells"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"renderTimeItem"})," prop gives you full design control over how individual time items\u2014hours, minutes, seconds, and meridiem\u2014are displayed in the ",(0,o.jsx)(n.strong,{children:"DateTimePicker"})," component. By passing a custom render function, you can style each unit to match your app\u2019s visual identity, from typography and spacing to hover effects and selected states. This feature is exclusive to the DateTimePicker, making it ideal for crafting a polished, cohesive time selection experience that feels native to your UI."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'<DateTimePicker\r\n  calendarProps={{\r\n    timePickerProps: {\r\n      visibleColumns: ["hours"],\r\n      renderTimeItem: (renderedValue, date, props, state) => (\r\n        <div {...props}>{renderedValue}:00</div>\r\n      ),\r\n    },\r\n  }}\r\n/>\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"customize-week-numbers",children:"Customize Week Numbers"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"renderWeekNumbers"})," prop allows you to customize the visual rendering of week numbers in the calendar. It only takes effect when the ",(0,o.jsx)(n.code,{children:"showWeekNumbers"})," prop is set to ",(0,o.jsx)(n.code,{children:"true"}),". Once enabled, you can pass a render function to style week number cells with your own layout, colors, or components\u2014making them feel like a natural part of your calendar design."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"<DatePicker\r\n  calendarProps={{\r\n    daysCalendarProps: {\r\n      showWeeksNumber: true,\r\n      renderWeekNumber: (renderedValue, weekNumber) => (\r\n        <div>#{renderedValue}</div>\r\n      ),\r\n    },\r\n  }}\r\n/>\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"customize-go-to-today-button",children:"Customize Go To Today Button"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"renderGoToTodayButton"}),' prop lets you customize the appearance of the "Go to Today" button in the calendar. It only takes effect when ',(0,o.jsx)(n.code,{children:"enableGoToToday"})," is set to ",(0,o.jsx)(n.code,{children:"true"}),". Once enabled, you can pass a render function to style the button with your own layout, colors, icons, or text\u2014making it feel native to your app\u2019s design while keeping the functionality intact."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"<DatePicker\r\n  calendarProps={{\r\n      enableGoToToday: true,\r\n      renderGoToToday: (onClick) => (\r\n        <button onClick={onClick}>Today</button>\r\n      ),\r\n  }}\r\n/>\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"customize-ok-button",children:"Customize OK Button"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"renderOkButton"})," prop allows you to fully customize the appearance of the OK button in the datetime picker. By passing a render function, you can style the button to match your app\u2019s design system\u2014adjusting layout, colors, typography, or even replacing it with a custom component. This gives you complete visual control while preserving the button\u2019s core functionality."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"<DateTimePicker\r\n  calendarProps={{\r\n      renderConfirmBtn: (onClick) => (\r\n        <button onClick={onClick}>Okay!</button>\r\n      ),\r\n  }}\r\n/>\n"})}),"\n",(0,o.jsx)(n.hr,{})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var r=t(96540);const o={},s=r.createContext(o);function i(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);